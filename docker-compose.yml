# Development Environment - Docker Compose
version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  database:
    image: docker.io/pgvector/pgvector:pg15
    container_name: portfolio-db
    environment:
      POSTGRES_DB: portfolio
      POSTGRES_USER: portfolio
      POSTGRES_PASSWORD: portfolio
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio -d portfolio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio-backend
    environment:
      - DATABASE_URL=postgresql://portfolio:portfolio@database:5432/portfolio
      - VECTOR_DB_URL=postgresql://portfolio:portfolio@database:5432/portfolio
      - CONTENT_PATH=/app/page_content
      - FRONTEND_URL=http://localhost:3000
      - DEBUG=true
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - RAG_ENABLED=true
    volumes:
      - ./frontend/public/page_content:/app/page_content:ro
      - ./backend/app:/app/app:ro
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend (Development)
  frontend-dev:
    image: node:18-alpine
    container_name: portfolio-frontend-dev
    working_dir: /app
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    ports:
      - "5173:5173"
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    depends_on:
      - backend

  # React Frontend (Production)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: portfolio-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    profiles:
      - production

  # Redis (for future caching and session management)
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  node_modules:

networks:
  default:
    name: portfolio-network